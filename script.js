console.log('Script loaded!');
// --- 1. Fix question count ---
async function callGroqAPI(level, count) {
    const prompts = {
        basic: `Generate ${count} basic SQL natural language questions for testing. These should be simple queries like counting, basic filtering, or simple aggregations. Focus on common business scenarios like customers, orders, products, sales, etc.\nIMPORTANT: Output ONLY the questions, one per line, with no explanations, no commentary, no reasoning, no preamble, and no numbering. Start your response immediately with the first question.`,
        intermediate: `Generate ${count} intermediate SQL natural language questions for testing. These should involve JOINs, GROUP BY, subqueries, and more complex filtering. Include scenarios with multiple tables and conditional logic.\nIMPORTANT: Output ONLY the questions, one per line, with no explanations, no commentary, no reasoning, no preamble, and no numbering. Start your response immediately with the first question.`,
        advanced: `Generate ${count} advanced SQL natural language questions for testing. These should involve complex JOINs, window functions, CTEs, nested subqueries, and advanced analytics. Include time-series analysis, ranking, and complex business logic.\nIMPORTANT: Output ONLY the questions, one per line, with no explanations, no commentary, no reasoning, no preamble, and no numbering. Start your response immediately with the first question.`
    };
    const payload = {
        model: CONFIG.MODEL,
        messages: [
            { role: 'user', content: prompts[level] }
        ],
        temperature: CONFIG.TEMPERATURE,
        max_tokens: CONFIG.MAX_TOKENS,
        top_p: CONFIG.TOP_P,
        stream: false,
        reasoning_effort: CONFIG.REASONING_EFFORT,
        stop: null
    };
    const response = await fetch(CONFIG.API_BASE_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
    });
    if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
    }
    const data = await response.json();
    const questionsText = data.choices[0].message.content;
    let questions = questionsText
        .split('\n')
        .map(q => q.trim())
        .filter(q => q.match(/^(How|What|Which|List|Show|Find|Give|Who|Where|When|Identify|Calculate|Determine|Display|Name|Count|Retrieve|Select|Provide|Return)\b/i));
    // Always return exactly 'count' questions
    if (questions.length < count) {
        for (let i = questions.length; i < count; i++) {
            questions.push('(No more questions generated by AI)');
        }
    } else if (questions.length > count) {
        questions = questions.slice(0, count);
    }
    return questions;
}

// --- 4. Dynamic floating data-themed background ---
function createFloatingDataIcons() {
    const icons = [
        '$', '#', '{ }', 'SQL', 'DB', '<>', '||', '==', '!=', '>', '<',
        'table', 'row', 'col', 'sum()', 'avg()', 'count()', 'select', 'from', 'where', 'join', 'group', 'order', 'limit', '∑', 'π', '∩', '∪', '∈', '∉', '∅', '∃', '∀', 'λ', 'π', 'σ', 'ρ', 'δ', 'γ', 'β', 'α', 'Ω', 'Φ', 'Ψ', 'χ', 'ψ', 'ω', 'μ', 'ν', 'ξ', 'ζ', 'η', 'θ', 'κ', 'τ', 'υ', 'φ', 'χ', 'ψ', 'ω', 'λ', 'π', 'σ', 'ρ', 'δ', 'γ', 'β', 'α', 'Ω', 'Φ', 'Ψ', 'χ', 'ψ', 'ω', 'μ', 'ν', 'ξ', 'ζ', 'η', 'θ', 'κ', 'τ', 'υ', 'φ', 'χ', 'ψ', 'ω', 'λ', 'π', 'σ', 'ρ', 'δ', 'γ', 'β', 'α', 'Ω', 'Φ', 'Ψ', 'χ', 'ψ', 'ω', 'μ', 'ν', 'ξ', 'ζ', 'η', 'θ', 'κ', 'τ', 'υ', 'φ', 'χ', 'ψ', 'ω'
    ];
    const bg = document.querySelector('.sql-bg');
    if (!bg) return;
    for (let i = 0; i < 80; i++) {
        const el = document.createElement('div');
        el.className = 'sql-float-auto';
        el.textContent = icons[Math.floor(Math.random() * icons.length)];
        const size = 18 + Math.random() * 32;
        el.style.fontSize = size + 'px';
        el.style.position = 'absolute';
        el.style.left = Math.random() * 100 + 'vw';
        el.style.top = Math.random() * 100 + 'vh';
        el.style.opacity = 0.10 + Math.random() * 0.18;
        el.style.color = ['#4fd1c5', '#ecc94b', '#f56565', '#805ad5', '#fff', '#2b6cb0', '#af6f6f'][Math.floor(Math.random()*7)];
        const duration = 18 + Math.random() * 32;
        const dir = Math.random() > 0.5 ? 1 : -1;
        el.animate([
            { transform: 'translate(0,0) scale(1)' },
            { transform: `translate(${dir*60}px,${dir*-60}px) scale(${1 + Math.random()*0.2})` },
            { transform: 'translate(0,0) scale(1)' }
        ], {
            duration: duration * 1000,
            iterations: Infinity,
            direction: 'alternate',
            easing: 'ease-in-out',
            delay: Math.random() * 10000
        });
        bg.appendChild(el);
    }
}

// --- Main App Initialization ---
document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const levelButtons = document.querySelectorAll('.level-btn');
    const generateBtn = document.getElementById('generateBtn');
    const clearBtn = document.getElementById('clearBtn');
    const testCaseCount = document.getElementById('testCaseCount');
    const questionsContainer = document.getElementById('questionsContainer');
    const loadingOverlay = document.getElementById('loadingOverlay');
    const goodFeedback = document.getElementById('goodFeedback');
    const badFeedback = document.getElementById('badFeedback');
    const goodCount = document.getElementById('goodCount');
    const badCount = document.getElementById('badCount');
    const totalGeneratedSpan = document.getElementById('totalGenerated');
    const copyAllBtn = document.getElementById('copyAllBtn');
    const clearStatsBtn = document.getElementById('clearStatsBtn');
    const passcodeModal = document.getElementById('passcodeModal');
    const passcodeInput = document.getElementById('passcodeInput');
    const submitPasscodeBtn = document.getElementById('submitPasscodeBtn');
    let currentLevel = null;
    let totalGenerated = 0;
    let feedbackCounts = { good: 0, bad: 0 };
    let feedbackClicked = false;

    // --- 1. Clear Results button ---
    if (clearBtn) {
        clearBtn.addEventListener('click', function() {
            questionsContainer.innerHTML = `
                <div class="placeholder">
                    <i class="fas fa-lightbulb"></i>
                    <p>Select a level and click Generate to see questions</p>
                </div>
            `;
            copyAllBtn.style.display = 'none';
        });
    }

    // --- 2. Clear Stats button ---
    if (clearStatsBtn) {
        clearStatsBtn.addEventListener('click', () => {
            passcodeModal.style.display = 'flex';
            passcodeInput.value = '';
            setTimeout(() => passcodeInput.focus(), 100);
        });
    }
    if (submitPasscodeBtn) {
        submitPasscodeBtn.addEventListener('click', handlePasscodeSubmit);
    }
    if (passcodeInput) {
        passcodeInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') handlePasscodeSubmit();
        });
    }
    function handlePasscodeSubmit() {
        const code = passcodeInput.value.trim();
        const realPass = '1072025'; // Correct password
        passcodeModal.style.display = 'none';

        if (code === realPass) {
            console.log('Correct password entered');
            // Clear all relevant data
            feedbackCounts = { good: 0, bad: 0 };
            totalGenerated = 0;
            feedbackClicked = false;
            goodFeedback.disabled = false;
            badFeedback.disabled = false;
            updateUI();
            // Update user number visually
            const userCountSpan = document.getElementById('userCount');
            if (userCountSpan) userCountSpan.textContent = '1';
            // Also clear localStorage for legacy/other keys
            localStorage.removeItem('sqlGeneratorData');
            console.log('localStorage after removal:', localStorage.getItem('sqlGeneratorData'));
            // Show success message
            const event = new CustomEvent('show-toast', {
                detail: { message: 'All stats cleared!', type: 'success' }
            });
            document.dispatchEvent(event);

            // Immediately reload the page to reflect cleared stats
            window.location.reload();
        } else {
            console.log('Wrong password entered');
            // Wrong password: animate and remove the button, but do NOT reload or reset stats
            if (clearStatsBtn) {
                clearStatsBtn.classList.add('break');
                setTimeout(() => {
                    clearStatsBtn.remove();
                    console.log('Button removed after wrong password');
                }, 700);
            }
        }
    }

    // --- 3. Generate questions with retry and friendly message ---
    async function generateQuestionsWithRetry(level, count) {
        let questions = await callGroqAPI(level, count);
        if (!questions || questions.filter(q => q && q.trim() && !q.includes('No more questions generated')).length === 0) {
            // Retry once
            questions = await callGroqAPI(level, count);
        }
        if (!questions || questions.filter(q => q && q.trim() && !q.includes('No more questions generated')).length === 0) {
            return ["Sorry, couldn't generate questions at this time. Please try again later."];
        }
        return questions;
    }

    // --- Level selection ---
    levelButtons.forEach(btn => {
        btn.addEventListener('click', () => selectLevel(btn.dataset.level));
    });
    function selectLevel(level) {
        currentLevel = level;
        levelButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.level === level) {
                btn.classList.add('active');
            }
        });
        generateBtn.disabled = false;
    }

    // --- Generate questions ---
    generateBtn.addEventListener('click', async function() {
        if (!currentLevel) {
            alert('Please select a difficulty level first!');
            return;
        }
        const count = parseInt(testCaseCount.value);
        if (count < 1 || count > 10) {
            alert('Please select between 1 and 10 test cases!');
            return;
        }
        showLoading(true);
        generateBtn.disabled = true;
        try {
            const questions = await generateQuestionsWithRetry(currentLevel, count);
            displayQuestions(questions);
            totalGenerated += questions.length;
            updateUI();
            saveData();
        } catch (error) {
            console.error('Error generating questions:', error);
            alert('Error generating questions. Please try again.');
        } finally {
            showLoading(false);
            generateBtn.disabled = false;
        }
    });

    // --- Display questions ---
    function displayQuestions(questions) {
        questionsContainer.innerHTML = '';
        questions.forEach((question, index) => {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'question-item';
            questionDiv.innerHTML = `
                <div class="question-number">Question ${index + 1}</div>
                <div class="question-text">${question}</div>
                <button class="copy-btn" onclick="copyQuestion('${question.replace(/'/g, "\\'")}')">
                    <i class="fas fa-copy"></i> Copy
                </button>
            `;
            questionsContainer.appendChild(questionDiv);
        });
        copyAllBtn.style.display = questions.length > 0 ? 'block' : 'none';
    }

    // --- Copy logic ---
    window.copyQuestion = function(question) {
        navigator.clipboard.writeText(question).then(() => {
            const event = new CustomEvent('show-toast', {
                detail: { message: 'Question copied!', type: 'success' }
            });
            document.dispatchEvent(event);
        });
    };
    copyAllBtn.addEventListener('click', function() {
        const questions = Array.from(document.querySelectorAll('.question-text'))
            .map(el => el.textContent)
            .join('\n\n');
        navigator.clipboard.writeText(questions).then(() => {
            const event = new CustomEvent('show-toast', {
                detail: { message: 'All questions copied!', type: 'success' }
            });
            document.dispatchEvent(event);
        });
    });

    // --- Loading overlay ---
    function showLoading(show) {
        loadingOverlay.style.display = show ? 'flex' : 'none';
    }

    // --- UI update/save/load ---
    function updateUI() {
        document.getElementById('goodCount').textContent = feedbackCounts.good;
        document.getElementById('badCount').textContent = feedbackCounts.bad;
        document.getElementById('totalGenerated').textContent = totalGenerated;
        const userCountSpan = document.getElementById('userCount');
        if (userCountSpan) userCountSpan.textContent = '1';
    }
    function saveData() {
        const data = {
            totalGenerated,
            feedbackCounts,
            timestamp: new Date().toISOString()
        };
        localStorage.setItem('sqlGeneratorData', JSON.stringify(data));
    }
    function loadSavedData() {
        const saved = localStorage.getItem('sqlGeneratorData');
        if (saved) {
            const data = JSON.parse(saved);
            totalGenerated = data.totalGenerated || 0;
            feedbackCounts = data.feedbackCounts || { good: 0, bad: 0 };
        }
    }
    loadSavedData();
    updateUI();

    // --- Passcode modal logic (obfuscated password) ---
    // This block is now handled by the new handlePasscodeSubmit function

    // --- Toast notification system ---
    document.addEventListener('show-toast', function(event) {
        const { message, type } = event.detail;
        showToast(message, type);
    });
    function showToast(message, type = 'info') {
        const existingToast = document.querySelector('.toast');
        if (existingToast) {
            existingToast.remove();
        }
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.innerHTML = `
            <i class="fas fa-check-circle"></i>
            <span>${message}</span>
        `;
        Object.assign(toast.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            background: type === 'success' ? '#48bb78' : '#667eea',
            color: 'white',
            padding: '12px 20px',
            borderRadius: '8px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
            zIndex: '9999',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            fontSize: '14px',
            fontWeight: '500',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease'
        });
        document.body.appendChild(toast);
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
        }, 100);
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }

    // --- Floating background icons ---
    createFloatingDataIcons(160, 0.6); // 160 icons, 0.6x speed

    // --- Feedback button logic ---
    goodFeedback.addEventListener('click', function() {
        if (!feedbackClicked) {
            feedbackCounts.good += 1;
            feedbackClicked = true;
            goodFeedback.disabled = true;
            badFeedback.disabled = true;
            updateUI();
            saveData();
        }
    });
    badFeedback.addEventListener('click', function() {
        if (!feedbackClicked) {
            feedbackCounts.bad += 1;
            feedbackClicked = true;
            goodFeedback.disabled = true;
            badFeedback.disabled = true;
            updateUI();
            saveData();
        }
    });
});

// Update createFloatingDataIcons to accept count and speedMultiplier
function createFloatingDataIcons(count = 80, speedMultiplier = 1) {
    const icons = [
        '$', '#', '{ }', 'SQL', 'DB', '<>', '||', '==', '!=', '>', '<',
        'table', 'row', 'col', 'sum()', 'avg()', 'count()', 'select', 'from', 'where', 'join', 'group', 'order', 'limit', '∑', 'π', '∩', '∪', '∈', '∉', '∅', '∃', '∀', 'λ', 'π', 'σ', 'ρ', 'δ', 'γ', 'β', 'α', 'Ω', 'Φ', 'Ψ', 'χ', 'ψ', 'ω', 'μ', 'ν', 'ξ', 'ζ', 'η', 'θ', 'κ', 'τ', 'υ', 'φ', 'χ', 'ψ', 'ω', 'λ', 'π', 'σ', 'ρ', 'δ', 'γ', 'β', 'α', 'Ω', 'Φ', 'Ψ', 'χ', 'ψ', 'ω', 'μ', 'ν', 'ξ', 'ζ', 'η', 'θ', 'κ', 'τ', 'υ', 'φ', 'χ', 'ψ', 'ω', 'λ', 'π', 'σ', 'ρ', 'δ', 'γ', 'β', 'α', 'Ω', 'Φ', 'Ψ', 'χ', 'ψ', 'ω', 'μ', 'ν', 'ξ', 'ζ', 'η', 'θ', 'κ', 'τ', 'υ', 'φ', 'χ', 'ψ', 'ω'
    ];
    const bg = document.querySelector('.sql-bg');
    if (!bg) return;
    for (let i = 0; i < count; i++) {
        const el = document.createElement('div');
        el.className = 'sql-float-auto';
        el.textContent = icons[Math.floor(Math.random() * icons.length)];
        const size = 18 + Math.random() * 32;
        el.style.fontSize = size + 'px';
        el.style.position = 'absolute';
        el.style.left = Math.random() * 100 + 'vw';
        el.style.top = Math.random() * 100 + 'vh';
        el.style.opacity = 0.10 + Math.random() * 0.18;
        el.style.color = ['#4fd1c5', '#ecc94b', '#f56565', '#805ad5', '#fff', '#2b6cb0', '#af6f6f'][Math.floor(Math.random()*7)];
        const duration = (18 + Math.random() * 32) * speedMultiplier;
        const dir = Math.random() > 0.5 ? 1 : -1;
        el.animate([
            { transform: 'translate(0,0) scale(1)' },
            { transform: `translate(${dir*60}px,${dir*-60}px) scale(${1 + Math.random()*0.2})` },
            { transform: 'translate(0,0) scale(1)' }
        ], {
            duration: duration * 1000,
            iterations: Infinity,
            direction: 'alternate',
            easing: 'ease-in-out',
            delay: Math.random() * 10000
        });
        bg.appendChild(el);
    }
}